/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package themaze;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author 073787251
 */
public class MainFrame extends javax.swing.JFrame {

    static int gameMode = 0; //0 is edit mode, 1 is play mode
    static ArrayList<Square> board = new ArrayList<>();

    private static final int IFW = JComponent.WHEN_IN_FOCUSED_WINDOW;
    private static final String moveRight = "move right";
    private static final String moveLeft = "move left";
    private static final String moveUp = "move up";
    private static final String moveDown = "move down";
    private static final String changeState = "change state";
    private static final String makeExit = "makeExit";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initBoard();
        gameBoard1.anim();
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("LEFT"), moveLeft);
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("RIGHT"), moveRight);
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("UP"), moveUp);
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("DOWN"), moveDown);
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("SPACE"), changeState);
        gameBoard1.getInputMap(IFW).put(KeyStroke.getKeyStroke("ENTER"), makeExit);

        gameBoard1.getActionMap().put(moveLeft, new moveAction(4));
        gameBoard1.getActionMap().put(moveRight, new moveAction(2));
        gameBoard1.getActionMap().put(moveUp, new moveAction(1));
        gameBoard1.getActionMap().put(moveDown, new moveAction(3));
        gameBoard1.getActionMap().put(changeState, new changeStateAction());
        gameBoard1.getActionMap().put(makeExit, new exitAction());
    }

    public void initBoard() {
        for (int i = 0; i < 750; i += 50) {
            for (int j = 0; j < 750; j += 50) {
                board.add(new Square(i, j, 0, false));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameBoard1 = new themaze.GameBoard();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jack's Maze Game");

        gameBoard1.setMinimumSize(new java.awt.Dimension(750, 750));

        javax.swing.GroupLayout gameBoard1Layout = new javax.swing.GroupLayout(gameBoard1);
        gameBoard1.setLayout(gameBoard1Layout);
        gameBoard1Layout.setHorizontalGroup(
            gameBoard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        gameBoard1Layout.setVerticalGroup(
            gameBoard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameBoard1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameBoard1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private class moveAction extends AbstractAction {

        int moveDir;

        moveAction(int move) {
            this.moveDir = move;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (moveDir == 1) {//UP 
                if (gameBoard1.py > 0) {
                    if (gameMode == 0) {
                        if (gameBoard1.px == Square.hovX && gameBoard1.py == Square.hovY + 50) {
                            for (Square s : board) {
                                if (s.x == Square.hovX && s.y == Square.hovY && s.state == 0) {
                                    gameBoard1.py -= 50;
                                    break;
                                }
                            }
                        } else {
                            Square.hovX = gameBoard1.px;
                            Square.hovY = gameBoard1.py - 50;
                        }
                    } else {
                        for (Square s : board) {
                            if (s.x == gameBoard1.px && s.y == gameBoard1.py - 50 && s.state == 0) {
                                gameBoard1.py -= 50;
                                break;
                            }
                        }
                    }
                }
            } else if (moveDir == 2) { //RIGHT
                if (gameBoard1.px < 700) {
                    if (gameMode == 0) {
                        if (gameBoard1.px == Square.hovX - 50 && gameBoard1.py == Square.hovY) {
                            for (Square s : board) {
                                if (s.x == Square.hovX && s.y == Square.hovY && s.state == 0) {
                                    gameBoard1.px += 50;
                                    break;
                                }
                            }
                        } else {
                            Square.hovX = gameBoard1.px + 50;
                            Square.hovY = gameBoard1.py;
                        }
                    } else {
                        for (Square s : board) {
                            if (s.x == gameBoard1.px + 50 && s.y == gameBoard1.py && s.state == 0) {
                                gameBoard1.px += 50;
                                break;
                            }
                        }
                    }
                }
            } else if (moveDir == 3) { //DOWN
                if (gameBoard1.py < 700) {
                    if (gameMode == 0) {
                        if (gameBoard1.px == Square.hovX && gameBoard1.py == Square.hovY - 50) {
                            for (Square s : board) {
                                if (s.x == Square.hovX && s.y == Square.hovY && s.state == 0) {
                                    gameBoard1.py += 50;
                                    break;
                                }
                            }
                        } else {
                            Square.hovX = gameBoard1.px;
                            Square.hovY = gameBoard1.py + 50;
                        }
                    } else {
                        for (Square s : board) {
                            if (s.x == gameBoard1.px && s.y == gameBoard1.py + 50 && s.state == 0) {
                                gameBoard1.py += 50;
                                break;
                            }
                        }
                    }
                }
            } else { //LEFT
                    if (gameBoard1.px > 0) {
                        if (gameMode == 0) {
                            if (gameBoard1.px == Square.hovX + 50 && gameBoard1.py == Square.hovY) {
                                for (Square s : board) {
                                    if (s.x == Square.hovX && s.y == Square.hovY && s.state == 0) {
                                        gameBoard1.px -= 50;
                                    }
                                }
                            } else {
                                Square.hovX = gameBoard1.px - 50;
                                Square.hovY = gameBoard1.py;
                            }
                        } else {
                            for (Square s : board) {
                                if (s.x == gameBoard1.px - 50 && s.y == gameBoard1.py && s.state == 0) {
                                    gameBoard1.px -= 50;
                                    break;
                                }
                            }
                        }
                    }
                }
                repaint();
            }
        }
        private class changeStateAction extends AbstractAction {

            changeStateAction() {

            }

            @Override
            public void actionPerformed(ActionEvent e) {
                //Find the selected square that is being hovered over
                if (gameMode == 0) {
                    for (Square s : board) {
                        if (s.x == Square.hovX && s.y == Square.hovY) {
                            s.state = 1 - s.state;
                        }
                    }
                }
            }
        }

        private class exitAction extends AbstractAction {

            exitAction() {

            }

            @Override
            public void actionPerformed(ActionEvent e) {
                //Find the selected square that is being hovered over
                if (gameMode == 0) {
                    for (Square s : board) {
                        if (s.x == Square.hovX && s.y == Square.hovY) {
                            if (s.exit) {
                                gameMode = 1;
                                gameBoard1.px = 0;
                                gameBoard1.py = 0;
                            }
                            s.exit = true;
                        }
                    }
                } else {
                    System.out.println("You're a winner!");
                }
            }
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private themaze.GameBoard gameBoard1;
    // End of variables declaration//GEN-END:variables

}
